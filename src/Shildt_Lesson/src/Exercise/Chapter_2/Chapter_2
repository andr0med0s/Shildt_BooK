    1) --1. Почему в Java строго определены диапазоны допустимых значений и обла-
         сти действия простых типов?

        Для обеспечения переносимости программ, то есть кроссплатформенности
--------------------------------------------------------------------------------------
    2) --2. Что собой представляет символьный тип в Java и чем он отличается от сим-
         вольного типа в ряде других языков программирования?

        Символьный тип char. Этот тип предназначен для представления элементов
        из таблицы символов, например, букв или цифр. Тип char является
        псевдоцелочисленным типом, поэтому значения этого типа можно задавать в виде
        числа.В Java для представления символов используется кодировка Unicode, а не
        ASCII, как во многих других языках программирования.
--------------------------------------------------------------------------------------
    3) -- 3. Переменная типа boolean может иметь любое значение, поскольку любое
          ненулевое значение интерпретируется как истинное. Верно или неверно?

        НЕВЕРНО! Тип boolean может содержать только два значения true или false
         (истина или ложь).
--------------------------------------------------------------------------------------
    4) --4. Допустим, результат выполнения программы выглядит следующим образом.
         Один
         Два
         Три
         Напишите строку кода с вызовом метода println(), где этот результат вы-
         водится в виде одной строки.

         System, out .println ("Один\пДва\пТри" );
--------------------------------------------------------------------------------------
    5) --5. Какая ошибка допущена в следующем фрагменте кода?
         for(i =0; i < 10; i++) {
         int sum;
         sum = sum + i;
         }
         System.out.println("Сумма: " + sum);
         -----------------------------

      for(i =0; i < 10; i++) {
      int sum;
      sum = sum + i;
      }

      System.out.println("Сумма: " + sum);

      В этом фрагменте кода имеются две грубые ошибки. Во-первых, перемен-
      ная sum заново создается на каждом шаге цикла for, следовательно, в про-
      межутке между последовательными итерациями предыдущее значение под-
      считываемой суммы не будет сохраняться в этой переменной. И во-вторых,
      переменная sum недоступна за пределами блока кода, в котором она объ-
      явлена. Поэтому ссылка на нее при вызове метода println() недопустима.

      является локальной переменной, объявлена внутри блока цикла ,

      Область видимости определяет, где переменная доступна для использования.
      Продолжительность жизни переменной определяет, когда переменная создается и
      когда уничтожается. Локальные переменные имеют локальную (блочную) область
      видимости, доступ к ним осуществляется только внутри блока, в котором они
      определены

--------------------------------------------------------------------------------------

    6) --- 6. Поясните различие между префиксной и постфиксной формами записи
           оператора инкремента.

      Думайте о ++i и i++ как о ПОХОЖЕЙ на i = i+1., но это НЕ ТО ЖЕ. Разница в
      том, когда i получает новое приращение.
      в ++i, приращение происходит немедленно.
      но если i++ там, приращение будет происходить, когда программа перейдет на
      следующую
      строку.

      Если оператор инкремента предшествует операнду, исполняющая среда Java
      выполнит операцию до извлечения значения операнда и использования его
      в остальной части выражения. Если же оператор инкремента следует за опе-
      рандом, исполняющая среда сначала извлечет значение операнда и лишь
      затем инкрементирует сам операнд.
--------------------------------------------------------------------------------------
    7)----- 7 .Покажите, каким образом укороченный логический оператор И может пре-
               дотвратить деление на нуль.
      if((b != 0) && (val / b)) ...
--------------------------------------------------------------------------------------
    8) ---8. До какого типа повышаются типы b y te и s h o r t при вычислении выра-
          жения?

     В выражениях типы byte и short повышаются до типа int.
--------------------------------------------------------------------------------------
    9) ---9. Когда возникает потребность в явном приведении типов?

        Расширяющие автоматические преобразования представлены следующими цепочками:

        byte -> short -> int -> long

        int -> double

        short -> float -> double

        char -> int

            Явное приведение типов требуется при выполнении преобразований между
            несовместимыми типами, а также в случае преобразований, сужающих диа-
            пазон допустимых значений

            Расширение и сужение примитивных типов
--------------------------------------------------------------------------------------
    10) -- 10. Напишите программу, которая находила бы все простые числа в диапазоне
           от 2 до 100.

           PrimeNumbers
--------------------------------------------------------------------------------------
    11) -- 11. Влияют ли лишние скобки на эффективность выполнения программ?

    нет не влияют
--------------------------------------------------------------------------------------
    12) -- 12. Определяет ли блок кода область действия переменных?
    да, определяет
--------------------------------------------------------------------------------------