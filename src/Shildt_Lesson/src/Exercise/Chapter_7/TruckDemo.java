package Exercise.Chapter_7;

//Расширение класса Vehicle
//Упражнение 7.1 стр 279
/**
 * Для того чтобы продемонстрировать возможности наследования,  расширим  класс Vehicle, созданный  в главе 4. Напомним, что класс Vehicle инкапсулирует данные о транспортныхсредствах и, в частности, сведения о количестве пассажиров, объеме топливногобака и расходе топлива. Воспользуемся классом Vehicle в качестве заготовки,на основе которой будут созданы более специализированные классы. Например,к категории транспортных средств, помимо всех прочих, относятся грузовики.Одной  из  важных характеристик  грузовика  является  его  грузоподъемность.

 */
/**
 * Поэтому для создания класса Truck можно расширить класс Vehicle, добавив переменную экземпляра, хранящую сведения о допустимом весе перевозимого груза.  В  этом  упражнении  переменные  экземпляра  объявляются  в  классе Vehicle как закрытые (private), а для обращения к ним используются специальные  методы доступа.  Поэтапное описание  процесса создания  программы приведено ниже.
 */

// Создание подкласса класса Vehicle для грузовиков
class Vehicle {

  private int passengers; // количество пассажиров
  private int fuelcap; // объем топливного бака  (в галлонах)
  private int mpg; // потребление топлива  (в милях на галлон)

  // Конструктор класса Vehicle
  Vehicle(int р, int f, int m) {
    passengers = р;
    fuelcap = f;
    mpg = m;
  }

  // Дальность поездки транспортного средства
  int range() {
    return mpg * fuelcap;
  }

  // Вычисление объема топлива,  требуемого
  // для прохождения заданного пути
  double fuelneeded(int miles) {
    return (double) miles / mpg;
  }

  // Методы доступа к переменным экземпляра
  int getPassengers() {
    return passengers;
  }

  void setPassengers(int p) {
    passengers = p;
  }

  int getFuelcap() {
    return fuelcap;
  }

  void setFuelcap(int f) {
    fuelcap = f;
  }

  int getMpg() {
    return mpg;
  }

  void setMpg(int m) {
    mpg = m;
  }
}

//  Расширение класса Vehicle для грузовиков
class Truck extends Vehicle {

  private int cargocap; // грузоподъемность,  выраженная в фунтах

  // Конструктор класса Truck
  Truck(int р, int f, int m, int c) { // Инициализация членов класса Vehicle
    //с использованием конструктора этого класса
    super(р, f, m);
    cargocap = c;
  } // Методы доступа к переменной cargocap

  int getCargo() {
    return cargocap;
  }

  void putCargo(int c) {
    cargocap = c;
  }
}

class TruckDemo {

  public static void main(String args[]) { // Создание ряда новых объектов типа Truck
    Truck semi = new Truck(2, 200, 7, 44000);
    Truck pickup = new Truck(3, 28, 15, 2000);
    double gallons;
    int dist = 252;
    gallons = semi.fuelneeded(dist);
    System.out.println(
      "Грузовик может перевезти " + semi.getCargo() + " фунтов."
    );
    System.out.println(
      "Для преодоления " +
      dist +
      " миль  грузовику требуется  " +
      gallons +
      "  галлонов топлива.\n"
    );
    gallons = pickup.fuelneeded(dist);
    System.out.println(
      "Пикап может перевезти  " + pickup.getCargo() + "  фунтов."
    );
    System.out.println(
      "Для преодоления " +
      dist +
      " миль пикапу требуется " +
      gallons +
      "  галлонов топлива."
    );
  }
}

/**
 * На основе класса V ehicle  можно создать немало других подклассов.  Например, в приведенной ниже заготовке класса, описывающего внедорожники, предусмотрена переменная, содержащая величину дорожного просвета для автомобиля.
 * 
 * // Создание класса,  описывающего внедорожники
 * class OffRoad extends Vehicle  {private int groundClearance; 
 *  // дорожный просвет,  выраженный
 * // в дюймах
 * // ...}
 * 
 * На основе  суперкласса,  определяющего общие свойства  некоторых объектов,  можно создать специализированные подклассы.  Каждый подкласс дополняет свойства суперкласса собственными уникальными свойствами. В этом и состоит сущность наследования.
 */