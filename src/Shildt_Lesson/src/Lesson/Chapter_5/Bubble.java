package Shildt_Lesson.src.Lesson.Chapter_5;
/*
Упражнение 5.1
Демонстрация алгоритма пузырьковой сортировки
*/

/*
* Как отмечалось выше, данные в одномерном массиве органи-
зованы в виде индексируемого линейного списка. Такая струк-
тура как нельзя лучше подходит для сортировки.
* */
class Bubble {
    public static void main(String[] args) {
        int[] nums = {99, -10, 100123, 18, -978,
                5623, 463, -9, 287, 49};
        int a, b, t;
        int size;

        size = 10; // количество сортируемых элементов

        //Отображение исходного массива
        System.out.println("Исходный массив: ");
        for (int i = 0; i < size; i++) {
            System.out.print(" " + nums[i]);
        }
        System.out.println();

        // Реализация алгоритма пузырьковой сортировки
        for (a = 1; a < size; a++) {
            for (b = size - 1; b >= a; b--) {
                if (nums[b - 1] > nums[b]) { //если требуемый порядок
                                            //следования не соблюдается,
                                            //поменять местами элементы
                    t = nums[b - 1];
                    nums[b - 1] = nums[b];
                    nums[b] = t;
                }
            }

            /*
            *           Во внутреннем цикле сравниваются соседние элементы массива и
                выявляются элементы, находящиеся не на своих местах. При обнаружении
                элемента, нарушающего требуемый порядок, два соседних элемента меня-
                ются местами. На каждом проходе наименьший элемент перемещается на
                одну позицию в нужное положение. Внешний цикл обеспечивает повторе-
                ние описанного алгоритма до завершения всего процесса сортировки.
            * */
            //Отображение отсортированного иассива
            System.out.print("Отсортированный массив: ");
            for (int i = 0; i < size; i++) {
                System.out.print(" " + nums[i]);
            }
            System.out.println();
        }
    }
}
