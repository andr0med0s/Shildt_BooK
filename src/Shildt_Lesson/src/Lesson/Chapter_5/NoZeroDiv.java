package Shildt_Lesson.src.Lesson.Chapter_5;

/*
* Оператор ? — один из самых удобных в Java и часто используется
* вместо инструкций if-else следующего вида:
if (условие)
переменная = выражение_1;
else
переменная = выражение_2;
здесь значение, присваиваемое переменной, определяется условием ин-
струкции if.
Оператор ? называется тернарным, поскольку он обрабатывает три операнда.
Этот оператор записывается в следующей общей форме:

* выражение_1 ? выражение_2 : выражение_3;

Здесь выражение_1 должно быть логическим, т.е. возвращать тип boolean,
а выражение_2 и вы раж ение^, разделяемые двоеточием, могут быть любого
типа, за исключением void. Но типы второго и третьего выражений должны
совпадать.

Значение выражения ? определяется следующим образом. Сначала вычис-
ляется выражение_1. Если оно дает логическое значение true , то вычисляется
выражение_2, а его значение становится результирующим для всего операто-
ра ?. Если же выражение_1 дает логическое значение false , то вычисляется
выражение_3, а его значение становится результирующим для всего оператора
?.
* */

// Предотвращение деления на нуль с помощью оператора ? стр 217


class NoZeroDiv {
    public static void main(String[] args) {
        int result;
        for (int i = -5; i < 6; i++) {
            result = i != 0 ? 100 / i : 0; //  Деление на нуль предотвращается

            if (i != 0) {
                System.out.println("100 / " + i + " равно " + result);
            }
        }
    }
}
/*
* Обратите внимание на следующую строку кода:
result = i != 0 ? 100 / i : 0;
где переменной result присваивается результат деления числа 100 на значе-
ние переменной i. Но деление выполняется только в том случае, если значение
переменной i не равно нулю. В противном случае переменной result присва-
ивается нулевое значение.
* */
/*
* Значение, возвращаемое оператором ?, не обязательно присваивать пере-
менной. Его можно, например, использовать в качестве параметра при вызове
метода. Если же все три выражения оператора ? имеют тип boolean, то сам
оператор ? может быть использован в качестве условия для выполнения цикла
или инструкции if .
* */

// Предотвращение деления на нуль с помощью оператора ?
class NoZeroDiv2 {
    public static void main(String[] args) {
        for(int i = -5; i < 6; i++) {
            if (i != 0 ? true : false) {
                System.out.println("100 / " + i + " равно " + 100 / i);
            }
        }
    }
}
/*
* Обратите внимание на выражение, определяющее условие выполнения ин-
струкции if. Если значение переменной i равно нулю, то оператор ? возвраща-
ет логическое значение false , что предотвращает деление на нуль, и результат
не отображается. В противном случае осуществляется обычное деление.
* */

// стр 129 Полное руководство

/*
* Вот общий вид операции ?:
выражение1 ? выражение2 : выражениеЗ
Здесь выражение1 может быть любым выражением, результатом
* которого является значение boolean. Если результатом выражения1 является true,
тогда вычисляется выражение2, а иначе выражениеЗ. Результатом операции ?
будет результат вычисленного выражения. Типы результатов выражения2 и
выражениеЗ должны быть одинаковыми (или совместимыми) и не могут быть
void.
* */

// Демонстрация работы операции ? .
class Ternary {
    public static void main (String [] args) {
        int i, k;
        i = 10;
        k = i < 0 ? -i : i; // получить абсолютную величину i
        System.out.print("Aбcoлютнaя величина ");
        System.out.println(i + " равна " + k);

        i = -10;
        k = i < 0 ? -i : i; // получить абсолютную величину i
        System.out.print("Aбcoлютнaя величина ");
        System.out.println(i + " равна " + k);
    }
}