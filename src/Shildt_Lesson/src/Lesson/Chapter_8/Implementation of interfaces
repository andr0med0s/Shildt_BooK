325 Java: руководство для начинающих, 7-е издание

Определенный однажды интерфейс может быть реализован одним или несколькими классами. Для 
реализации интерфейса в объявление класса следует ввести ключевое слово implements, а затем 
определить методы, объявленные в интерфейсе. Ниже приведена общая форма реализации интерфейса в 
классе.
class имя_класса extends суперкласс implements интерфейс {
    // тело класса
}
Если в классе должно быть реализовано несколько интерфейсов, то их названия указываются через 
запятую. Разумеется, ключевое слово extends и имя суперкласса указывать не обязательно.
    Реализуемые  методы  интерфейса  должны  быть  объявлены  открытыми (public). А сигнатура   
реализованного метода должна полностью соответствовать сигнатуре,  объявленной  в составе  
интерфейса.  Ниже  приведен  пример класса ByTwos, реализующего рассмотренный ранее интерфейс 
Series. В этом классе формируется последовательный ряд числовых значений, каждое из которых на два 
больше предыдущего.
// Реализация интерфейса Series
class ByTwos implements Series { // Реализация интерфейса Series
    int start;
    int val;

    ByTwos() {
        start = 0;
        val = 0;
    }

    public int getNext() {
        val += 2;
        return val;
    }

    public void reset() {
        start = 0;
        val = 0;
    }

    public void setStart(int x){
        start = x;
        val = x;
    }
}

Обратите внимание на то, что методы getNext (), reset ()  и setStart () объявлены открытыми. Это 
нужно сделать непременно, поскольку любой метод интерфейса неявно считается открытым для доступа.  
Ниже приведен  пример программы, демонстрирующий применение класса ByTwos.

class SeriesDemo  {
    public static void main(String args[])  {
        ByTwos ob = new ByTwos();

        for(int i=0;  i < 5;  i++)
        System.out.println("Следующее значение:  "  +ob.getNext());
        System.out.println("\nC6poc");
        ob.reset ();

        for(int i=0;  i < 5;  i++)
        System.out.println("Следующее значение:  "  +ob.getNext());
        System.out.println("\nНачальное значение:  100");
        ob.setStart(100) ;

        for(int i=0;  i < 5;  i++)
        System.out.println("Следующее значение:  "  +ob.getNext());
    }
}

Класс, реализующий интерфейс, может содержать дополнительные переменные и методы,  что вполне 
допустимо.  Более того,  именно так в большинстве случаев и поступают те, кто программирует на 
Java.  Например, в приведенную ниже версию класса ByTwos добавлен метод getPrevious (),  
возвращающий предыдущее числовое значение.
// Реализация интерфейса Series и добавление метода getPrevious()
class ByTwos  implements Series  {
    int start;
    int val;
    int prev;

    ByTwos()  {
        start = 0;
        val = 0;
        prev = -2;
    }

    public int getNext()  {
        prev = val;
        val += 2;
        return val;
    }

    public void reset ()  {
        start = 0;
        val = 0;
        prev = -2;
    }

    public void setStart(int x)  {
        start = x;
        val = x;
        prev = x - 2;
    }

    int getPrevious(){ // добавление метода, который не определен в интерфейсе
        return prev;
    }
Обратите внимание на то, что для добавления метода getPrevious ()  пришлось изменить реализацию 
методов, объявленных в интерфейсе Series. Но сам интерфейс не претерпел никаких изменений. Эти 
изменения не видны за пределами класса и не влияют на его использование. В этом и состоит одно из 
преимуществ интерфейсов.
Как пояснялось ранее, интерфейс может быть реализован каким угодно количеством классов.  В 
качестве примера ниже приведен код класса ByThrees,формирующего последовательный ряд числовых 
значений, каждое из которых на три больше предыдущего.
// Еще одна реализация интерфейса Series
class ByThrees implements Series  {   // ◄------Другая реализация интерфейса Series
    int start;
    int val;

    ByThrees()  {
        start = 0;
        val = 0;
    }
    
    public int getNext()  {
        val += 3;
        return val;
    }

    public void reset ()  {
        start = 0;
        val = 0;
    }

    public void setStart(int х)  {
        start = х;
        val = х;
    }
}

Следует также иметь в виду, что если в определении класса имеется ключевое слово implements, но он 
не реализует все методы указанного интерфейса, то этот класс должен быть объявлен абстрактным 
(abstract). Объект такого класса создать нельзя, но можно использовать его в качестве суперкласса, 
а завершить реализацию методов интерфейса — в его подклассах

Глава 8. Пакеты и интерфейсы 329