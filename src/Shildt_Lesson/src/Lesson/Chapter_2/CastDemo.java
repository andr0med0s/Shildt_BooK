package Lesson.Chapter_2;
// стр 91
// Демонстрация приведенеия типов
public class CastDemo {
    public static void main(String[] args) {
        double x, y;
        byte b;
        int i;
        char ch;

        x = 10.0;
        y = 3.0;

        i = (int) (x / y); // привести тип double к типу int В данном случае теряется дробная часть числа
        System.out.println("Целочисленный результат деления x / y: " + i);

        i = 100;
        b = (byte) i; // А в этом случае информация не теряется. Тип byte может содержать значение 100.
        System.out.println("Значение b: " + b);

        i = 257;
        b = (byte) i; // На этот раз информация теряется. Тип byte не может содержать значение 257.
        System.out.println("Значение b: " + b);

        b = 88; // Представление символа X в коде ASCII
        ch = (char) b; // Явное приведение несовместимых типов
        System.out.println("ch: " + ch);
        
    }
    /* Так выглядит общий синтаксис приведения типов:
     (целевой_тип) выражение */
}
/*
В данной программе приведение выражения (х / у) к типу in t означает по-
терю дробной части числового значения результата деления. Когда переменной
b присваивается значение 100 из переменной i, данные не теряются, поскольку
диапазон допустимых значений у типа byte достаточен для представления это-
го значения. Далее при попытке присвоить переменной b значение 257 снова
происходит потеря данных, поскольку значение 257 оказывается за пределами
диапазона допустимых значений для типа byte. И наконец, когда переменной
char присваивается содержимое переменной типа byte, данные не теряются,
но явное приведение типов все же требуется.
 */