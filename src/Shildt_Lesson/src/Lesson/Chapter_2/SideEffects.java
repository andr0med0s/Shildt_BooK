package Shildt_Lesson.src.Lesson.Chapter_2;
// стр 87
// Демонстрация роли побочных эффектов
public class SideEffects {
    public static void main(String[] args) {
        int i;

        i = 0;

        // Значение переменной i инкрементируется несмотря на то, что проверяемое условие в инструкции if ложно
        if(false & (++i < 100))
            System.out.println("Эта строка не будет отображаться");
        System.out.println("Инструкция if выполняется: " + i);
        //  оторбражается 1

        // В данном случае значение переменной i не инкрементируется,
        // поскольку второй операнд укороченного логического оператора не вычисляется ,
        // а следовательно , инкримент пропускается
        if(false && (++i < 100))
            System.out.println("Эта строка не будет отображаться");
        System.out.println("Инструкция if выполняется: " + i);
            // по-прежнему отображается 1 !!
    }
}
 /*
 * Как следует из приведенного выше фрагмента кода и комментариев к нему,
в первой условной инструкции if значение переменной i должно увели-
чиваться на единицу, независимо от того, выполняется ли условие этой ин-
струкции. Но когда во второй условной инструкции if применяется укоро-
ченный логический оператор, значение переменной i не инкрементируется,
поскольку первый операнд в проверяемом условии имеет логическое значе-
ние false. Следовательно, если логика программы требует, чтобы второй
операнд логического оператора непременно вычислялся, следует применять
обычные, а не укороченные формы логических операторов.
 * */