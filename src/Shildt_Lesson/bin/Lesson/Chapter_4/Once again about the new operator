общий синтаксис оператора `new` в контексте присваивания:

переменная_класса = new имя_класса {список_аргументов)

Здесь переменная_класса обозначает имя переменной создаваемого клас-
са, а имя_класса — конкретное имя класса, реализуемого в виде экземпляра
его объекта. Имя класса и список аргументов в скобках, который может быть
пустым, обозначают конструктор этого класса. Если в классе не определен его
собственный конструктор, то в операторе new будет использован конструктор,
предоставляемый в Java по умолчанию. Следовательно, оператор new может
быть использован для создания объекта, относящегося к классу любого типа.
Оператор new возвращает ссылку на вновь созданный объект, который получает
переменная класса в результате присваивания в данной форме записи.


В Java простые типы (как int или float) не реализованы в виде объектов.
Ради повышения эффективности кода они реализованы как обычные переменные.
Переменная простого типа фактически содержит присвоенное ей значение.
Как пояснялось ранее, объектные переменные ссылочного типа представля-
ют собой ссылки на объекты. Такая косвенная адресация (наряду с другими
особенностями объектов) вносит дополнительные накладные расходы при
работе с объектами. Но подобные издержки не возникают при обращении с
простыми типами данных.

//Полное руководство 12-е издание
//стр 177
Вам уже известно, что при размещении объекта в памяти применяется пока-
занная ниже общая форма:
переменная-класса = new имя-класса ( ) ;
Теперь вы понимаете, зачем нужны скобки после имени класса. На самом
деле происходит вызов конструктора класса. Таким образом, в следующей
строке:
Вох myboxl = new Вох ( ) ;
фрагмент new Вох ( ) вызывает конструктор Вох ( ) . Если конструктор для
класса не определяется явно, тогда компилятор Java создает стандартный
конструктор.
При использовании стандартного конструктора все неинициализированные переменные
экземпляра будут иметь стандартные значения, которые для числовых типов,
ссылочных типов и логических значений равны соответственно нулю, null и
false. Стандартного конструктора часто оказывается достаточно для про-
стых классов, но для более сложных классов он обычно не подходит. После
определения собственного конструктора стандартный конструктор больше
не применяется.