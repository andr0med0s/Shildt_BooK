312 Java: руководство для начинающих, 7-е издание

Пакет  — это группа логически связанных классов.  Пакеты  помогают лучше организовать код и обеспечивают 
дополнительный уровень инкапсуляции.  Интерфейс определяет набор  методов, которые должны предоставляться
в классе.  В самом интерфейсе эти методы не реализуются, лишь анонсируются.  Пакеты и интерфейсы предлагают
дополнительные возможности для более рациональной организации  программ и  контроля их структуры.

Пакеты

Иногда  взаимозависимые  части  программ  удобно  объединять  в  группы. В Java для этой цели предусмотрены
пакеты. Прежде всего, пакет предоставляет механизм объединения взаимосвязанных частей программы.  
При обращении к классам,  входящим в пакет, указывается его имя. Таким образом, пакеты дают возможность 
именовать коллекции классов.  И  кроме того, пакет является частью механизма управления доступом в Java. 
Классы могут быть объявлены как закрытые для всех пакетов, исключая тот, в который они входят. 
Следовательно, пакет обеспечивает также средства для инкапсуляции классов.  Рассмотрим все эти средства 
более подробно.
При именовании класса для него выделяется имя в пространстве имен. При этом пространство имен определяет 
область объявлений. В Java не допускается присваивание двум классам одинаковых имен из одного и того же 
пространства имен. Иными словами, в пределах пространства имен каждый класс должен обладать уникальным 
именем.  В примерах программ, представленных в предыдущих главах,  по умолчанию использовалось глобальное 
пространство имен. Это удобно для небольших программ, но по мере увеличения объема кода могут возникать 
конфликты имен. В крупных программах бывает нелегко выбрать уникальное имя для класса. Более того, при 
использовании библиотек и кода, написанного другими программистами,  приходится принимать специальные меры, 
чтобы предотвратить конфликт имен. Для разрешения подобных затруднений служат пакеты, позволяющие разделить 
пространство имен на отдельные области. Если класс определен в пакете, то имя пакета присоединяется к имени 
класса, в результате чего исключается конфликт между двумя классами с одинаковыми именами, но 
принадлежащими к разным пакетам.
Пакет обычно содержит логически  связанные  классы,  и  поэтому  в Java определены специальные права 
доступа к содержимому пакета. Так, в пакете можно определить код, доступный другому коду из того же самого 
пакета, но недоступный из других пакетов. Это позволяет создавать автономные группы связанных классов и 
присваивать операциям,  выполняемым  в этих пакетах, статус закрытых.

Определение пакета

Каждый класс в Java относится к тому или иному пакету.  Если инструкция package отсутствует в коде, то 
используется глобальный пакет, выбираемый по умолчанию.  Пакет по умолчанию не обладает именем, что 
упрощает его применение.  Именно поэтому в рассмотренных до сих пор примерах программ не нужно было 
беспокоиться о пакетах.  Но пакет по умолчанию подходит только для очень простых программ, служащих в 
качестве примера, тогда как для реальных приложений он малопригоден. Как правило, для разрабатываемого кода 
приходится определять один или несколько пакетов.
Чтобы создать пакет, достаточно поместить инструкцию package в начало файла, содержащего исходный  код 
программы  на Java.  В результате классы, определенные в этом файле, будут принадлежать указанному пакету. 
А поскольку пакет определяет пространство имен, имена классов, содержащихся в файле, войдут в это 
пространство имен как его составные части.
Общая форма инструкции package такова:
package имя_пакета;
Например, приведенная ниже строка кода определяет пакет mypack.
package  mypack;

(314 Java: руководство для начинающих, 7-е издание)

Для управления пакетами в Java используется файловая система, в которой с целью хранения содержимого 
каждого пакета выделяется отдельный каталог. Например, файлы с расширением  . class, содержащие классы и 
объявленные в пакете mypack, будут храниться в каталоге mypack.
Подобно другим именам в Java, имена пакетов зависят от регистра символов. Это означает, что каталог, 
предназначенный для хранения пакета, должен обладать именем, в точности совпадающим с названием пакета. 
Если у вас возникнут затруднения при опробовании примеров программ, представленных в этой главе, проверьте 
соответствие имен пакетов именам каталогов.  Пакеты всегда именуются прописными буквами.
В разных файлах могут содержаться одинаковые инструкции package. Эта инструкция лишь определяет,  к какому 
именно пакету должны принадлежать классы, код которых содержится в данном файле, и не запрещает другим 
классам входить в состав того же самого пакета. Как правило, пакеты реальных программ распространяются на 
большое количество файлов.
В Java допускается создавать иерархию пакетов. Для этого достаточно разделить  имена  пакетов точками.  
Ниже  приведена общая  форма  инструкции package для определения многоуровневого пакета.
package пакет_1 .пакет_2,пакет_3. . . пакет_N;
Само собой разумеется, что для поддержки иерархии пакетов следует создать аналогичную иерархию каталогов.
package alpha.beta.gamma;
Классы, содержащиеся в данном пакете, должны храниться в структуре каталогов  . . . /alpha/beta/gam m a,  
где многоточие обозначает путь к каталогу alpha.

Поиск пакетов и переменная среды CLASSPATH 

Как уже говорилось выше, иерархия каталогов пакетов должна отражать иерархию самих пакетов. В связи с этим  
возникает интересный вопрос: как исполняющая среда Java узнает, где искать созданные пакеты? Ответ на этот 
вопрос состоит из трех частей.  Во-первых, по умолчанию исполняющая среда обращается к текущему рабочему 
каталогу. Так, если поместить пакет в подкаталоге текущего каталога, он будет там найден.  Во-вторых,  
один  или несколько путей к каталогам можно задать в качестве значения переменной среды classpath. И 
в-третьих, при вызове интерпретатора java и компилятора javac из командной строки можно указать параметр 
-classp ath , а также путь к каталогам с классами.
Рассмотрим в качестве примера следующее определение пакета: 
package mypack
Для того чтобы  программа  могла  найти  пакет mypack,  должно  быть  выполнено одно из трех условий:  
программа должна быть запущена из каталога, cодержащего пакет mypack; в переменной среды CLASSPATH должен 
храниться полный путь к каталогу с пакетом mypack; при запуске программы интерпретатору java должен быть 
передан параметр -classpath и указан путь к каталогус пакетом mypack.
Вам будет проще всего работать с примерами программ,  представленными далее, если вы создадите в текущем 
каталоге, используемом для разработки программ,  структуру каталогов,  предназначенных для хранения 
пакетов,  а затем разместите файлы с расширением  .class в соответствующих каталогах. Далее следует 
выполнять программы из каталога, выбранного для разработки.
Во избежание каких-либо осложнений все файлы с расширениями  . java и .class рекомендуется хранить в том 
каталоге, который выделен для содержащего их пакета. Кроме того, каждый исходный файл следует компилировать 
из того каталога, который находится по иерархии выше каталога с пакетом

